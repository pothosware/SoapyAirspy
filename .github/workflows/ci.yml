name: CI
on: [push, pull_request]
jobs:
    linux-ci:
        name: Linux
        strategy:
            fail-fast: false
            matrix:
                build_type: [Release, Debug]
                config:
                    - cc: gcc-9
                      cxx: g++-9
                      os: ubuntu-20.04

                    - cc: gcc-10
                      cxx: g++-10
                      os: ubuntu-20.04

                    - cc: gcc-11
                      cxx: g++-11
                      os: ubuntu-22.04

                    - cc: gcc-12
                      cxx: g++-12
                      os: ubuntu-22.04

                    - cc: clang-10
                      cxx: clang++-10
                      os: ubuntu-20.04

                    - cc: clang-11
                      cxx: clang++-11
                      os: ubuntu-20.04

                    - cc: clang-12
                      cxx: clang++-12
                      os: ubuntu-20.04

                    - cc: clang-13
                      cxx: clang++-13
                      os: ubuntu-22.04

                    - cc: clang-14
                      cxx: clang++-14
                      os: ubuntu-22.04
        runs-on: ${{matrix.config.os}}
        env:
            CC: ${{matrix.config.cc}}
            CXX: ${{matrix.config.cxx}}
            INSTALL_PREFIX: /usr/local
        steps:
          - uses: actions/checkout@v2
          - name: Install dependencies
            run: |
                sudo apt install --no-install-recommends libsoapysdr-dev soapysdr-tools libairspy-dev
          - name: Build SoapyAirSpy
            run: |
                mkdir ${{github.workspace}}/build
                cd ${{github.workspace}}/build
                cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ${{github.workspace}}
                sudo make install
          - name: Test module registration
            run: |
                SoapySDRUtil --check=airspy
    osx-ci:
        name: OS X
        strategy:
            fail-fast: false
            matrix:
                build_type: [Release, Debug]
                config:
                    - cc: gcc-9
                      cxx: g++-9
                      os: macos-11

                    - cc: gcc-10
                      cxx: g++-10
                      os: macos-11

                    - cc: gcc-11
                      cxx: g++-11
                      os: macos-11

                    - cc: clang
                      cxx: clang++
                      os: macos-11

                    # TODO: re-enable after MacOS Monterey Python issue fixed
                    #- cc: clang
                    #  cxx: clang++
                    #  os: macos-12
        runs-on: ${{matrix.config.os}}
        env:
            CC: ${{matrix.config.cc}}
            CXX: ${{matrix.config.cxx}}
            INSTALL_PREFIX: /usr/local
        steps:
          - uses: actions/checkout@v2
          - name: Install dependencies
            run: |
                brew install airspy

                # Build SoapySDR that supports OS X GCC modules
                git clone https://github.com/pothosware/SoapySDR
                cd SoapySDR
                git checkout f8d57652d12f9d212f373a81e493eba1a0b058c5
                mkdir build
                cd build
                cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DENABLE_PYTHON=OFF -DENABLE_PYTHON3=OFF ..
                sudo make install
          - name: Build SoapyAirSpy
            run: |
                mkdir ${{github.workspace}}/build
                cd ${{github.workspace}}/build
                cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ${{github.workspace}}
                sudo make install
          - name: Test module registration
            run: |
                SoapySDRUtil --check=airspy
    windows-ci:
        name: Windows
        strategy:
            fail-fast: false
            matrix:
                build_type: [Release, Debug]
                config:
                    #
                    # MSVC
                    #

                    - cmake_config: -G "Visual Studio 16 2019" -A "Win32"
                      arch: win32
                      pthread_arch: x86
                      os: windows-2019
                      msvc: true

                    - cmake_config: -G "Visual Studio 16 2019" -A "x64"
                      arch: x64
                      pthread_arch: x64
                      os: windows-2019
                      msvc: true

                    - cmake_config: -G "Visual Studio 17 2022" -A "Win32"
                      arch: win32
                      pthread_arch: x86
                      os: windows-2022
                      msvc: true

                    - cmake_config: -G "Visual Studio 17 2022" -A "x64"
                      arch: x64
                      pthread_arch: x64
                      os: windows-2022
                      msvc: true

                    #
                    # MinGW
                    #

                    - cmake_config: -G "MinGW Makefiles"
                      pthread_arch: x64
                      os: windows-2019
                      msvc: false

                    # TODO: reenable when Github updates GCC past 11.2.0
                    #- cmake_config: -G "MinGW Makefiles"
                    #  os: windows-2022
                    #  msvc: false
        runs-on: ${{matrix.config.os}}
        env:
            INSTALL_PREFIX: 'C:\Program Files\SoapySDR'
        steps:
          - uses: actions/checkout@v2
          - uses: ilammy/msvc-dev-cmd@v1
            with:
                arch: ${{matrix.arch}}
            if:
                ${{matrix.config.msvc == true}}
          - uses: microsoft/setup-msbuild@v1.1
            if:
                ${{matrix.config.msvc == true}}
          - name: Set up install directory
            run: |
                $Env:INSTALL_BINDIR = Join-Path $Env:INSTALL_PREFIX "bin"
                $Env:INSTALL_INCDIR = Join-Path $Env:INSTALL_PREFIX "include"
                $Env:INSTALL_LIBDIR = Join-Path $Env:INSTALL_PREFIX "lib"
                $Env:INCLUDE += ";$Env:INSTALL_PREFIX\include"
                $Env:LIB += ";$Env:INSTALL_PREFIX\lib"

                mkdir -p $Env:INSTALL_BINDIR
                mkdir -p $Env:INSTALL_INCDIR
                mkdir -p $Env:INSTALL_LIBDIR
          - name: Install MSVC dependencies
            if:
                ${{matrix.config.msvc == true}}
            run: |
                $Env:INSTALL_INCDIR = Join-Path $Env:INSTALL_PREFIX "include"
                $Env:INSTALL_LIBDIR = Join-Path $Env:INSTALL_PREFIX "lib"

                # libusb
                git clone https://github.com/libusb/libusb -b v1.0.26
                cd libusb\msvc
                msbuild libusb_static_2019.vcxproj /p:configuration=${{matrix.build_type}} /p:platform=${{matrix.config.arch}}
                cp -v ..\libusb\*.h $Env:INSTALL_INCDIR
                cp -v ..\${{matrix.config.arch}}\${{matrix.build_type}}\lib\libusb-1.0.lib $Env:INSTALL_LIBDIR\usb-1.0.lib
          - name: Install MinGW dependencies
            if:
                ${{matrix.config.msvc == false}}
            run: |
                $Env:INSTALL_INCDIR = Join-Path $Env:INSTALL_PREFIX "include"
                $Env:INSTALL_LIBDIR = Join-Path $Env:INSTALL_PREFIX "lib"

                # libusb
                git clone https://github.com/libusb/libusb -b v1.0.26
                cd libusb
                ./bootstrap.sh
                ls
                ./configure --prefix $Env:INSTALL_PREFIX
                make install
          - name: Install dependencies
            run: |
                $Env:INSTALL_BINDIR = Join-Path $Env:INSTALL_PREFIX "bin"
                $Env:INSTALL_INCDIR = Join-Path $Env:INSTALL_PREFIX "include"
                $Env:INSTALL_LIBDIR = Join-Path $Env:INSTALL_PREFIX "lib"
                $Env:INCLUDE += ";$Env:INSTALL_PREFIX\include"
                $Env:LIB += ";$Env:INSTALL_PREFIX\lib"

                # pthreads-win32
                cd ${{runner.workspace}}
                Invoke-WebRequest -Uri http://mirrors.kernel.org/sourceware/pthreads-win32/pthreads-w32-2-9-1-release.zip -Outfile pthreads.zip
                Expand-Archive pthreads.zip pthreads
                cp -v pthreads\Pre-built.2\include\* $Env:INSTALL_INCDIR
                cp -v pthreads\Pre-built.2\dll\${{matrix.config.pthread_arch}}\* $Env:INSTALL_BINDIR
                cp -v pthreads\Pre-built.2\lib\${{matrix.config.pthread_arch}}\* $Env:INSTALL_LIBDIR

                # See: https://github.com/coapp-packages/pthreads/issues/1
                Set-Content -Path $(Join-Path $Env:INSTALL_INCDIR "pthread.h") -Value "#define _TIMESPEC_DEFINED"
                Add-Content -Path $(Join-Path $Env:INSTALL_INCDIR "pthread.h") -Value $(Get-Content -Path pthreads\Pre-built.2\include\pthread.h)

                # libairspy
                cd ${{github.workspace}}
                git clone https://github.com/airspy/airspyone_host -b v1.0.10 --recursive
                mkdir airspyone_host\build
                cd airspyone_host
                git apply -v ${{github.workspace}}\.github\patches\airspy_windows.patch
                cd build
                cmake ${{matrix.config.cmake_config}} -DCMAKE_INSTALL_PREFIX="$Env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ..
                cmake --build . --config ${{matrix.build_type}}
                cmake --install . --config ${{matrix.build_type}}

                # SoapySDR
                cd ${{runner.workspace}}
                git clone https://github.com/pothosware/SoapySDR -b soapy-sdr-0.8.1
                mkdir SoapySDR\build
                cd SoapySDR\build
                cmake ${{matrix.config.cmake_config}} -DENABLE_PYTHON=OFF -DENABLE_PYTHON3=OFF -DCMAKE_INSTALL_PREFIX="$Env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ..
                cmake --build . --config ${{matrix.build_type}}
                cmake --install . --config ${{matrix.build_type}}
          - name: Build SoapyAirspy
            run: |
                $Env:INCLUDE += ";$Env:INSTALL_PREFIX\include"
                $Env:LIB += ";$Env:INSTALL_PREFIX\lib"
                mkdir build
                cd build
                cmake ${{matrix.config.cmake_config}} -DCMAKE_INSTALL_PREFIX="$Env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ..
                cmake --build . --config ${{matrix.build_type}}
                cmake --install . --config ${{matrix.build_type}}
          - name: Test module registration
            run: |
                $Env:PATH += ";$Env:INSTALL_PREFIX\bin"
                SoapySDRUtil --check=airspy
    freebsd-ci:
        name: FreeBSD
        runs-on: macos-12
        strategy:
            fail-fast: false
            matrix:
                build_type: [Release, Debug]
                release: ["12.3", "13.0", "13.1"]
        steps:
        - uses: actions/checkout@v2
        - uses: vmactions/freebsd-vm@v0
          name: Test in FreeBSD
          with:
              release: ${{matrix.release}}
              copyback: false
              prepare: |
                  pkg install -y cmake SoapySDR comms/airspy
              run: |
                  # We can't separate these steps, so add prints for clarity.

                  echo
                  echo "----------------------------------"
                  echo "Building..."
                  echo "----------------------------------"
                  mkdir build
                  cd build
                  cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ${{github.workspace}}
                  make

                  echo
                  echo "----------------------------------"
                  echo "Installing..."
                  echo "----------------------------------"
                  make install

                  echo
                  echo "----------------------------------"
                  echo "Testing module registration..."
                  echo "----------------------------------"
                  SoapySDRUtil --check=airspy
